name: Deploy Next.js to Ubuntu EC2

on:
  push:
    branches:
      - neelam-cicd  # Deployment branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # ✅ Step 1: Checkout Code
      - name: Checkout Code
        uses: actions/checkout@v3

      # ✅ Step 2: Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.18.0'  # Using a Node.js version compatible with Next.js

      # ✅ Step 3: Prepare SSH Key
      - name: Prepare SSH Key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > ./id_rsa
          chmod 600 ./id_rsa

      # ✅ Step 4: Generate `.env` in GitHub Runner
      - name: Generate `.env` file
        run: |
          echo "📌 Creating .env file locally..."
          cat <<EOF > .env
          GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
          NEXTAUTH_URL=${{ vars.NEXTAUTH_URL }}
          NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}
          NEXT_PUBLIC_API_URL=${{ vars.NEXT_PUBLIC_API_URL }}
          NEXT_PUBLIC_USE_MOCK_DATA=${{ vars.NEXT_PUBLIC_USE_MOCK_DATA }}
          EOF
          echo "✅ .env file created."

      # ✅ Step 5: Install Dependencies & Build in GitHub Runner
      - name: Install Dependencies & Build
        run: |
          echo "📦 Installing dependencies..."
          npm ci
          echo "✅ Dependencies installed."
          
          echo "🛠️ Building the frontend..."
          npm run build
          echo "✅ Build completed."

      # ✅ Step 6: Transfer Built Code to EC2
      - name: Transfer Files to EC2
        run: |
          echo "🔄 Connecting to EC2 & transferring files..."
          if [ ! -d ".next" ]; then
            echo "❌ Build directory does not exist! Make sure 'npm run build' succeeded."
            exit 1
          fi
          
          ssh -o StrictHostKeyChecking=no -i ./id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            echo "🛑 Stopping running frontend application..."
            pm2 stop resume_frontend || true  # Stop only the frontend, not all apps

            echo "🧹 Cleaning up old files and caches..."
            sudo apt-get autoremove -y
            sudo apt-get clean
          
            echo "🔄 Checking if resume_frontend directory exists..."
            export HOME=/home/${{ secrets.EC2_USER }}
            if [ -d "$HOME/resume_frontend" ]; then
              echo "📥 Directory already exists, removing old files..."
              rm -rf $HOME/resume_frontend
            fi
            mkdir -p $HOME/resume_frontend
            echo "✅ Directory ready."
          EOF

          rsync -avz --exclude=node_modules --exclude=.git -e "ssh -o StrictHostKeyChecking=no -i ./id_rsa" ./ ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/${{ secrets.EC2_USER }}/resume_frontend

          echo "✅ Files transferred."

      # ✅ Step 6.1: Install & Configure NGINX for Reverse Proxy
      - name: Configure NGINX Reverse Proxy
        run: |
          echo "⚙️ Setting up NGINX..."
          ssh -o StrictHostKeyChecking=no -i ./id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            # Install NGINX if not installed
            if ! command -v nginx &> /dev/null; then
              echo "🚀 Installing NGINX..."
              sudo apt-get update
              sudo apt-get install -y nginx
            else
              echo "✅ NGINX is already installed."
            fi

            # Test NGINX Configuration
            sudo nginx -t
            
            # Remove default NGINX config if exists
            if [ -f "/etc/nginx/sites-enabled/default" ]; then
              echo "🛑 Removing default NGINX configuration..."
              sudo rm /etc/nginx/sites-enabled/default
            fi

            # Create new frontend NGINX config
            echo "🔧 Configuring frontend server block..."
            sudo bash -c 'cat <<EOL > /etc/nginx/sites-available/frontend
            server {
                listen 80;
                server_name _;
                
                location / {
                    proxy_pass http://localhost:3000;
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade $http_upgrade;
                    proxy_set_header Connection "Upgrade";
                }

                error_page 502 /502.html;
            }
            EOL'

            # Enable frontend configuration
            sudo ln -sf /etc/nginx/sites-available/frontend /etc/nginx/sites-enabled/frontend

            # Restart NGINX
            sudo systemctl restart nginx
            echo "✅ NGINX restarted."

            # Configure Firewall
            echo "🌐 Configuring firewall rules..."
            sudo ufw allow 80/tcp
            sudo ufw allow 3000/tcp
            echo "y" | sudo ufw enable
            echo "✅ Firewall configured."
          EOF


      # ✅ Step 7: Start Frontend on EC2
      - name: Restart Frontend Application
        run: |
          echo "🚀 Restarting Frontend Application..."
          ssh -o StrictHostKeyChecking=no -i ./id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            cd $HOME/resume_frontend

            echo "⚙️ Checking if Node.js is installed..."
            if ! command -v node &> /dev/null; then
              echo "🚀 Installing Node.js & npm..."
              curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
              sudo apt-get install -y nodejs
            else
              echo "✅ Node.js is already installed."
            fi
            node -v
            npm -v

            echo "📦 Installing dependencies..."
            npm ci --omit=dev
            echo "✅ Dependencies installed."
      
            echo "⚙️ Ensuring PM2 is installed..."
            if ! command -v pm2 &> /dev/null; then
              echo "🚀 Installing PM2..."
              sudo npm install -g pm2
            fi
            echo "✅ PM2 is ready."

            echo "🚀 Restarting Frontend Application..."
            pm2 restart resume_frontend --update-env || pm2 start npm --name "resume_frontend" -- start --update-env
            pm2 save
            echo "✅ Frontend restarted successfully."
          EOF

      # ✅ Step 8: Verify Deployment
      - name: Verify Frontend Deployment
        run: |
          echo "🛠️ Checking Frontend status..."
          ssh -o StrictHostKeyChecking=no -i ./id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            sleep 5
            if curl -f http://localhost; then
              echo "✅ Frontend is running!"
            else
              echo "❌ Frontend failed to start! Check logs."
              exit 1
            fi
          EOF

      - name: Final Cleanup & Restart SSHD
        run: |
          echo "🛑 Performing Final Cleanup..."
          ssh -o StrictHostKeyChecking=no -i ./id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            echo "🧹 Cleaning up package lists..."
            sudo apt-get autoremove -y
            sudo apt-get clean
            echo "🔄 Restarting NGINX..."
            sudo systemctl restart nginx
            echo "✅ NGINX restarted successfully."
          EOF
